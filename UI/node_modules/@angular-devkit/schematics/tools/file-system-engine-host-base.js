"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const path_1 = require("path");
const file_system_host_1 = require("./file-system-host");
const file_system_utility_1 = require("./file-system-utility");
/**
 * A EngineHost base class that uses the file system to resolve collections. This is the base of
 * all other EngineHost provided by the tooling part of the Schematics library.
 */
class FileSystemEngineHostBase {
    constructor() {
        this._transforms = [];
    }
    listSchematics(collection) {
        return Object.keys(collection.description.schematics);
    }
    registerOptionsTransform(t) {
        this._transforms.push(t);
    }
    /**
     *
     * @param name
     * @return {{path: string}}
     */
    createCollectionDescription(name) {
        try {
            const path = this._resolveCollectionPath(name);
            if (!path) {
                return null;
            }
            const partialDesc = file_system_utility_1.readJsonFile(path);
            if (!partialDesc) {
                return null;
            }
            const description = this._transformCollectionDescription(name, Object.assign({}, partialDesc, { path }));
            if (!description || !description.name) {
                return null;
            }
            return description;
        }
        catch (e) {
            return null;
        }
    }
    createSchematicDescription(name, collection) {
        if (!(name in collection.schematics)) {
            return null;
        }
        const collectionPath = path_1.dirname(collection.path);
        const partialDesc = collection.schematics[name];
        if (!partialDesc) {
            return null;
        }
        // Use any on this ref as we don't have the OptionT here, but we don't need it (we only need
        // the path).
        if (!partialDesc.factory) {
            return null;
        }
        const resolvedRef = this._resolveReferenceString(partialDesc.factory, collectionPath);
        if (!resolvedRef) {
            return null;
        }
        const { path } = resolvedRef;
        let schema = partialDesc.schema;
        let schemaJson = undefined;
        if (schema) {
            schema = path_1.join(collectionPath, schema);
            schemaJson = file_system_utility_1.readJsonFile(schema);
        }
        const description = this._transformSchematicDescription(name, collection, Object.assign({}, partialDesc, { schema,
            schemaJson,
            name,
            path, factoryFn: resolvedRef.ref, collection }));
        if (!description) {
            return null;
        }
        return description;
    }
    createSourceFromUrl(url) {
        switch (url.protocol) {
            case null:
            case 'file:':
                return (context) => {
                    // Resolve all file:///a/b/c/d from the schematic's own path, and not the current
                    // path.
                    const root = path_1.resolve(path_1.dirname(context.schematic.description.path), url.path);
                    return new schematics_1.FileSystemTree(new file_system_host_1.FileSystemHost(root), true);
                };
        }
        return null;
    }
    transformOptions(schematic, options) {
        return this._transforms.reduce((acc, t) => t(schematic, acc), options);
    }
    getSchematicRuleFactory(schematic, _collection) {
        return schematic.factoryFn;
    }
}
exports.FileSystemEngineHostBase = FileSystemEngineHostBase;
//# sourceMappingURL=data:application/json;base64,